// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.ui.labels;

import com.maltaisn.notes.ui.SharedViewModel;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LabelFragment_MembersInjector implements MembersInjector<LabelFragment> {
  private final Provider<LabelViewModel.Factory> viewModelFactoryProvider;

  private final Provider<SharedViewModel> sharedViewModelProvider;

  public LabelFragment_MembersInjector(Provider<LabelViewModel.Factory> viewModelFactoryProvider,
      Provider<SharedViewModel> sharedViewModelProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.sharedViewModelProvider = sharedViewModelProvider;
  }

  public static MembersInjector<LabelFragment> create(
      Provider<LabelViewModel.Factory> viewModelFactoryProvider,
      Provider<SharedViewModel> sharedViewModelProvider) {
    return new LabelFragment_MembersInjector(viewModelFactoryProvider, sharedViewModelProvider);
  }

  @Override
  public void injectMembers(LabelFragment instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
    injectSharedViewModelProvider(instance, sharedViewModelProvider);
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.labels.LabelFragment.viewModelFactory")
  public static void injectViewModelFactory(LabelFragment instance,
      LabelViewModel.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.labels.LabelFragment.sharedViewModelProvider")
  public static void injectSharedViewModelProvider(LabelFragment instance,
      Provider<SharedViewModel> sharedViewModelProvider) {
    instance.sharedViewModelProvider = sharedViewModelProvider;
  }
}
