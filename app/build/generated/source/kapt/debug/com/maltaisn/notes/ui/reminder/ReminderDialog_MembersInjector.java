// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.ui.reminder;

import com.maltaisn.notes.ui.SharedViewModel;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ReminderDialog_MembersInjector implements MembersInjector<ReminderDialog> {
  private final Provider<SharedViewModel> sharedViewModelProvider;

  private final Provider<ReminderViewModel.Factory> viewModelFactoryProvider;

  public ReminderDialog_MembersInjector(Provider<SharedViewModel> sharedViewModelProvider,
      Provider<ReminderViewModel.Factory> viewModelFactoryProvider) {
    this.sharedViewModelProvider = sharedViewModelProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<ReminderDialog> create(
      Provider<SharedViewModel> sharedViewModelProvider,
      Provider<ReminderViewModel.Factory> viewModelFactoryProvider) {
    return new ReminderDialog_MembersInjector(sharedViewModelProvider, viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(ReminderDialog instance) {
    injectSharedViewModelProvider(instance, sharedViewModelProvider);
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.reminder.ReminderDialog.sharedViewModelProvider")
  public static void injectSharedViewModelProvider(ReminderDialog instance,
      Provider<SharedViewModel> sharedViewModelProvider) {
    instance.sharedViewModelProvider = sharedViewModelProvider;
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.reminder.ReminderDialog.viewModelFactory")
  public static void injectViewModelFactory(ReminderDialog instance,
      ReminderViewModel.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
