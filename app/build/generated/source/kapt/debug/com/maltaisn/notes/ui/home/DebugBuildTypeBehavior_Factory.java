// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.ui.home;

import com.maltaisn.notes.model.LabelsRepository;
import com.maltaisn.notes.model.NotesRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DebugBuildTypeBehavior_Factory implements Factory<DebugBuildTypeBehavior> {
  private final Provider<NotesRepository> notesRepositoryProvider;

  private final Provider<LabelsRepository> labelsRepositoryProvider;

  public DebugBuildTypeBehavior_Factory(Provider<NotesRepository> notesRepositoryProvider,
      Provider<LabelsRepository> labelsRepositoryProvider) {
    this.notesRepositoryProvider = notesRepositoryProvider;
    this.labelsRepositoryProvider = labelsRepositoryProvider;
  }

  @Override
  public DebugBuildTypeBehavior get() {
    return newInstance(notesRepositoryProvider.get(), labelsRepositoryProvider.get());
  }

  public static DebugBuildTypeBehavior_Factory create(
      Provider<NotesRepository> notesRepositoryProvider,
      Provider<LabelsRepository> labelsRepositoryProvider) {
    return new DebugBuildTypeBehavior_Factory(notesRepositoryProvider, labelsRepositoryProvider);
  }

  public static DebugBuildTypeBehavior newInstance(NotesRepository notesRepository,
      LabelsRepository labelsRepository) {
    return new DebugBuildTypeBehavior(notesRepository, labelsRepository);
  }
}
