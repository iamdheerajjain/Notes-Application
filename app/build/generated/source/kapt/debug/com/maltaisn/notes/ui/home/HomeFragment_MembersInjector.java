// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.ui.home;

import com.maltaisn.notes.model.PrefsManager;
import com.maltaisn.notes.ui.SharedViewModel;
import com.maltaisn.notes.ui.note.NoteFragment_MembersInjector;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class HomeFragment_MembersInjector implements MembersInjector<HomeFragment> {
  private final Provider<SharedViewModel> sharedViewModelProvider;

  private final Provider<PrefsManager> prefsManagerProvider;

  private final Provider<HomeViewModel.Factory> viewModelFactoryProvider;

  public HomeFragment_MembersInjector(Provider<SharedViewModel> sharedViewModelProvider,
      Provider<PrefsManager> prefsManagerProvider,
      Provider<HomeViewModel.Factory> viewModelFactoryProvider) {
    this.sharedViewModelProvider = sharedViewModelProvider;
    this.prefsManagerProvider = prefsManagerProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static MembersInjector<HomeFragment> create(
      Provider<SharedViewModel> sharedViewModelProvider,
      Provider<PrefsManager> prefsManagerProvider,
      Provider<HomeViewModel.Factory> viewModelFactoryProvider) {
    return new HomeFragment_MembersInjector(sharedViewModelProvider, prefsManagerProvider, viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(HomeFragment instance) {
    NoteFragment_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
    NoteFragment_MembersInjector.injectPrefsManager(instance, prefsManagerProvider.get());
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.home.HomeFragment.viewModelFactory")
  public static void injectViewModelFactory(HomeFragment instance,
      HomeViewModel.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
