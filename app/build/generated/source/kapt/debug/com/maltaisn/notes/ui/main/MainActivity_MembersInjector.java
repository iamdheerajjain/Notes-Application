// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.ui.main;

import com.maltaisn.notes.model.PrefsManager;
import com.maltaisn.notes.ui.SharedViewModel;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<SharedViewModel> sharedViewModelProvider;

  private final Provider<MainViewModel.Factory> viewModelFactoryProvider;

  private final Provider<PrefsManager> prefsProvider;

  public MainActivity_MembersInjector(Provider<SharedViewModel> sharedViewModelProvider,
      Provider<MainViewModel.Factory> viewModelFactoryProvider,
      Provider<PrefsManager> prefsProvider) {
    this.sharedViewModelProvider = sharedViewModelProvider;
    this.viewModelFactoryProvider = viewModelFactoryProvider;
    this.prefsProvider = prefsProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<SharedViewModel> sharedViewModelProvider,
      Provider<MainViewModel.Factory> viewModelFactoryProvider,
      Provider<PrefsManager> prefsProvider) {
    return new MainActivity_MembersInjector(sharedViewModelProvider, viewModelFactoryProvider, prefsProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    injectSharedViewModelProvider(instance, sharedViewModelProvider);
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
    injectPrefs(instance, prefsProvider.get());
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.main.MainActivity.sharedViewModelProvider")
  public static void injectSharedViewModelProvider(MainActivity instance,
      Provider<SharedViewModel> sharedViewModelProvider) {
    instance.sharedViewModelProvider = sharedViewModelProvider;
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.main.MainActivity.viewModelFactory")
  public static void injectViewModelFactory(MainActivity instance,
      MainViewModel.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.main.MainActivity.prefs")
  public static void injectPrefs(MainActivity instance, PrefsManager prefs) {
    instance.prefs = prefs;
  }
}
