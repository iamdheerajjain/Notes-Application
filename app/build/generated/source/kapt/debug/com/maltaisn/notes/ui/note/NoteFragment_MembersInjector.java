// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.ui.note;

import com.maltaisn.notes.model.PrefsManager;
import com.maltaisn.notes.ui.SharedViewModel;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class NoteFragment_MembersInjector implements MembersInjector<NoteFragment> {
  private final Provider<SharedViewModel> sharedViewModelProvider;

  private final Provider<PrefsManager> prefsManagerProvider;

  public NoteFragment_MembersInjector(Provider<SharedViewModel> sharedViewModelProvider,
      Provider<PrefsManager> prefsManagerProvider) {
    this.sharedViewModelProvider = sharedViewModelProvider;
    this.prefsManagerProvider = prefsManagerProvider;
  }

  public static MembersInjector<NoteFragment> create(
      Provider<SharedViewModel> sharedViewModelProvider,
      Provider<PrefsManager> prefsManagerProvider) {
    return new NoteFragment_MembersInjector(sharedViewModelProvider, prefsManagerProvider);
  }

  @Override
  public void injectMembers(NoteFragment instance) {
    injectSharedViewModelProvider(instance, sharedViewModelProvider);
    injectPrefsManager(instance, prefsManagerProvider.get());
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.note.NoteFragment.sharedViewModelProvider")
  public static void injectSharedViewModelProvider(NoteFragment instance,
      Provider<SharedViewModel> sharedViewModelProvider) {
    instance.sharedViewModelProvider = sharedViewModelProvider;
  }

  @InjectedFieldSignature("com.maltaisn.notes.ui.note.NoteFragment.prefsManager")
  public static void injectPrefsManager(NoteFragment instance, PrefsManager prefsManager) {
    instance.prefsManager = prefsManager;
  }
}
