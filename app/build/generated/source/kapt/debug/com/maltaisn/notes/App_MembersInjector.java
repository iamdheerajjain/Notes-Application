// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes;

import com.maltaisn.notes.model.NotesDatabase;
import com.maltaisn.notes.model.PrefsManager;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class App_MembersInjector implements MembersInjector<App> {
  private final Provider<PrefsManager> prefsProvider;

  private final Provider<NotesDatabase> databaseProvider;

  public App_MembersInjector(Provider<PrefsManager> prefsProvider,
      Provider<NotesDatabase> databaseProvider) {
    this.prefsProvider = prefsProvider;
    this.databaseProvider = databaseProvider;
  }

  public static MembersInjector<App> create(Provider<PrefsManager> prefsProvider,
      Provider<NotesDatabase> databaseProvider) {
    return new App_MembersInjector(prefsProvider, databaseProvider);
  }

  @Override
  public void injectMembers(App instance) {
    injectPrefs(instance, prefsProvider.get());
    injectDatabase(instance, databaseProvider.get());
  }

  @InjectedFieldSignature("com.maltaisn.notes.App.prefs")
  public static void injectPrefs(App instance, PrefsManager prefs) {
    instance.prefs = prefs;
  }

  @InjectedFieldSignature("com.maltaisn.notes.App.database")
  public static void injectDatabase(App instance, NotesDatabase database) {
    instance.database = database;
  }
}
