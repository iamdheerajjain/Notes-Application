// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.di;

import android.content.Context;
import android.content.SharedPreferences;
import com.maltaisn.notes.App;
import com.maltaisn.notes.App_MembersInjector;
import com.maltaisn.notes.model.DefaultJsonManager;
import com.maltaisn.notes.model.DefaultJsonManager_Factory;
import com.maltaisn.notes.model.DefaultLabelsRepository;
import com.maltaisn.notes.model.DefaultLabelsRepository_Factory;
import com.maltaisn.notes.model.DefaultNotesRepository;
import com.maltaisn.notes.model.DefaultNotesRepository_Factory;
import com.maltaisn.notes.model.LabelsDao;
import com.maltaisn.notes.model.NotesDao;
import com.maltaisn.notes.model.NotesDatabase;
import com.maltaisn.notes.model.PrefsManager;
import com.maltaisn.notes.model.PrefsManager_Factory;
import com.maltaisn.notes.model.ReminderAlarmManager;
import com.maltaisn.notes.model.ReminderAlarmManager_Factory;
import com.maltaisn.notes.receiver.AlarmReceiver;
import com.maltaisn.notes.receiver.AlarmReceiver_MembersInjector;
import com.maltaisn.notes.receiver.ReceiverAlarmCallback;
import com.maltaisn.notes.receiver.ReceiverAlarmCallback_Factory;
import com.maltaisn.notes.ui.SharedViewModel;
import com.maltaisn.notes.ui.SharedViewModel_Factory;
import com.maltaisn.notes.ui.edit.EditFragment;
import com.maltaisn.notes.ui.edit.EditFragment_MembersInjector;
import com.maltaisn.notes.ui.edit.EditViewModel_Factory;
import com.maltaisn.notes.ui.edit.EditViewModel_Factory_Impl;
import com.maltaisn.notes.ui.home.DebugBuildTypeBehavior;
import com.maltaisn.notes.ui.home.DebugBuildTypeBehavior_Factory;
import com.maltaisn.notes.ui.home.HomeFragment;
import com.maltaisn.notes.ui.home.HomeFragment_MembersInjector;
import com.maltaisn.notes.ui.home.HomeViewModel_Factory;
import com.maltaisn.notes.ui.home.HomeViewModel_Factory_Impl;
import com.maltaisn.notes.ui.labels.LabelEditDialog;
import com.maltaisn.notes.ui.labels.LabelEditDialog_MembersInjector;
import com.maltaisn.notes.ui.labels.LabelEditViewModel_Factory;
import com.maltaisn.notes.ui.labels.LabelEditViewModel_Factory_Impl;
import com.maltaisn.notes.ui.labels.LabelFragment;
import com.maltaisn.notes.ui.labels.LabelFragment_MembersInjector;
import com.maltaisn.notes.ui.labels.LabelViewModel_Factory;
import com.maltaisn.notes.ui.labels.LabelViewModel_Factory_Impl;
import com.maltaisn.notes.ui.main.MainActivity;
import com.maltaisn.notes.ui.main.MainActivity_MembersInjector;
import com.maltaisn.notes.ui.main.MainViewModel_Factory;
import com.maltaisn.notes.ui.main.MainViewModel_Factory_Impl;
import com.maltaisn.notes.ui.note.NoteFragment_MembersInjector;
import com.maltaisn.notes.ui.note.NoteItemFactory;
import com.maltaisn.notes.ui.note.NoteItemFactory_Factory;
import com.maltaisn.notes.ui.notification.NotificationActivity;
import com.maltaisn.notes.ui.notification.NotificationActivity_MembersInjector;
import com.maltaisn.notes.ui.notification.NotificationViewModel_Factory;
import com.maltaisn.notes.ui.notification.NotificationViewModel_Factory_Impl;
import com.maltaisn.notes.ui.reminder.ReminderDialog;
import com.maltaisn.notes.ui.reminder.ReminderDialog_MembersInjector;
import com.maltaisn.notes.ui.reminder.ReminderViewModel_Factory;
import com.maltaisn.notes.ui.reminder.ReminderViewModel_Factory_Impl;
import com.maltaisn.notes.ui.search.SearchFragment;
import com.maltaisn.notes.ui.search.SearchFragment_MembersInjector;
import com.maltaisn.notes.ui.search.SearchViewModel_Factory;
import com.maltaisn.notes.ui.search.SearchViewModel_Factory_Impl;
import com.maltaisn.notes.ui.settings.ExportPasswordDialog;
import com.maltaisn.notes.ui.settings.ExportPasswordDialog_MembersInjector;
import com.maltaisn.notes.ui.settings.ExportPasswordViewModel_Factory;
import com.maltaisn.notes.ui.settings.ExportPasswordViewModel_Factory_Impl;
import com.maltaisn.notes.ui.settings.ImportPasswordDialog;
import com.maltaisn.notes.ui.settings.ImportPasswordDialog_MembersInjector;
import com.maltaisn.notes.ui.settings.ImportPasswordViewModel_Factory;
import com.maltaisn.notes.ui.settings.ImportPasswordViewModel_Factory_Impl;
import com.maltaisn.notes.ui.settings.SettingsFragment;
import com.maltaisn.notes.ui.settings.SettingsFragment_MembersInjector;
import com.maltaisn.notes.ui.settings.SettingsViewModel_Factory;
import com.maltaisn.notes.ui.settings.SettingsViewModel_Factory_Impl;
import com.maltaisn.notes.ui.sort.SortDialog;
import com.maltaisn.notes.ui.sort.SortDialog_MembersInjector;
import com.maltaisn.notes.ui.sort.SortViewModel;
import com.maltaisn.notes.ui.sort.SortViewModel_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerAppComponent {
  private DaggerAppComponent() {
  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context appContext) {
      Preconditions.checkNotNull(appContext);
      return new AppComponentImpl(appContext);
    }
  }

  private static final class AppComponentImpl implements AppComponent {
    private final Context appContext;

    private final AppComponentImpl appComponentImpl = this;

    private Provider<Context> appContextProvider;

    private Provider<NotesDatabase> providesDatabaseProvider;

    private Provider<NotesDao> providesNotesDaoProvider;

    private Provider<SharedPreferences> providesSharedPreferencesProvider;

    private Provider<PrefsManager> prefsManagerProvider;

    private Provider<DefaultNotesRepository> defaultNotesRepositoryProvider;

    private Provider<ReceiverAlarmCallback> receiverAlarmCallbackProvider;

    private Provider<ReminderAlarmManager> reminderAlarmManagerProvider;

    private Provider<SharedViewModel> sharedViewModelProvider;

    private Provider<LabelsDao> providesLabelsDaoProvider;

    private Provider<DefaultLabelsRepository> defaultLabelsRepositoryProvider;

    private Provider<DefaultJsonManager> defaultJsonManagerProvider;

    private MainViewModel_Factory mainViewModelProvider;

    private Provider<com.maltaisn.notes.ui.main.MainViewModel.Factory> factoryProvider;

    private NotificationViewModel_Factory notificationViewModelProvider;

    private Provider<com.maltaisn.notes.ui.notification.NotificationViewModel.Factory> factoryProvider2;

    private Provider<NoteItemFactory> noteItemFactoryProvider;

    private Provider<DebugBuildTypeBehavior> debugBuildTypeBehaviorProvider;

    private HomeViewModel_Factory homeViewModelProvider;

    private Provider<com.maltaisn.notes.ui.home.HomeViewModel.Factory> factoryProvider3;

    private SearchViewModel_Factory searchViewModelProvider;

    private Provider<com.maltaisn.notes.ui.search.SearchViewModel.Factory> factoryProvider4;

    private EditViewModel_Factory editViewModelProvider;

    private Provider<com.maltaisn.notes.ui.edit.EditViewModel.Factory> factoryProvider5;

    private LabelViewModel_Factory labelViewModelProvider;

    private Provider<com.maltaisn.notes.ui.labels.LabelViewModel.Factory> factoryProvider6;

    private SettingsViewModel_Factory settingsViewModelProvider;

    private Provider<com.maltaisn.notes.ui.settings.SettingsViewModel.Factory> factoryProvider7;

    private ReminderViewModel_Factory reminderViewModelProvider;

    private Provider<com.maltaisn.notes.ui.reminder.ReminderViewModel.Factory> factoryProvider8;

    private LabelEditViewModel_Factory labelEditViewModelProvider;

    private Provider<com.maltaisn.notes.ui.labels.LabelEditViewModel.Factory> factoryProvider9;

    private Provider<SortViewModel> sortViewModelProvider;

    private ExportPasswordViewModel_Factory exportPasswordViewModelProvider;

    private Provider<com.maltaisn.notes.ui.settings.ExportPasswordViewModel.Factory> factoryProvider10;

    private ImportPasswordViewModel_Factory importPasswordViewModelProvider;

    private Provider<com.maltaisn.notes.ui.settings.ImportPasswordViewModel.Factory> factoryProvider11;

    private AppComponentImpl(Context appContextParam) {
      this.appContext = appContextParam;
      initialize(appContextParam);

    }

    private SharedPreferences sharedPreferences() {
      return AppModule_Companion_ProvidesSharedPreferencesFactory.providesSharedPreferences(appContext);
    }

    private PrefsManager prefsManager() {
      return new PrefsManager(sharedPreferences());
    }

    private NotesDao notesDao() {
      return DatabaseModule_ProvidesNotesDaoFactory.providesNotesDao(providesDatabaseProvider.get());
    }

    private DefaultNotesRepository defaultNotesRepository() {
      return new DefaultNotesRepository(notesDao(), prefsManager());
    }

    private ReceiverAlarmCallback receiverAlarmCallback() {
      return new ReceiverAlarmCallback(appContext);
    }

    private ReminderAlarmManager reminderAlarmManager() {
      return new ReminderAlarmManager(defaultNotesRepository(), receiverAlarmCallback());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Context appContextParam) {
      this.appContextProvider = InstanceFactory.create(appContextParam);
      this.providesDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvidesDatabaseFactory.create(appContextProvider));
      this.providesNotesDaoProvider = DatabaseModule_ProvidesNotesDaoFactory.create(providesDatabaseProvider);
      this.providesSharedPreferencesProvider = AppModule_Companion_ProvidesSharedPreferencesFactory.create(appContextProvider);
      this.prefsManagerProvider = PrefsManager_Factory.create(providesSharedPreferencesProvider);
      this.defaultNotesRepositoryProvider = DefaultNotesRepository_Factory.create(providesNotesDaoProvider, prefsManagerProvider);
      this.receiverAlarmCallbackProvider = ReceiverAlarmCallback_Factory.create(appContextProvider);
      this.reminderAlarmManagerProvider = ReminderAlarmManager_Factory.create(((Provider) defaultNotesRepositoryProvider), ((Provider) receiverAlarmCallbackProvider));
      this.sharedViewModelProvider = SharedViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), reminderAlarmManagerProvider);
      this.providesLabelsDaoProvider = DatabaseModule_ProvidesLabelsDaoFactory.create(providesDatabaseProvider);
      this.defaultLabelsRepositoryProvider = DefaultLabelsRepository_Factory.create(providesLabelsDaoProvider);
      this.defaultJsonManagerProvider = DefaultJsonManager_Factory.create(providesNotesDaoProvider, providesLabelsDaoProvider, AppModule_Companion_GetJsonFactory.create(), reminderAlarmManagerProvider, prefsManagerProvider);
      this.mainViewModelProvider = MainViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), ((Provider) defaultLabelsRepositoryProvider), prefsManagerProvider, ((Provider) defaultJsonManagerProvider), reminderAlarmManagerProvider);
      this.factoryProvider = MainViewModel_Factory_Impl.create(mainViewModelProvider);
      this.notificationViewModelProvider = NotificationViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), reminderAlarmManagerProvider);
      this.factoryProvider2 = NotificationViewModel_Factory_Impl.create(notificationViewModelProvider);
      this.noteItemFactoryProvider = NoteItemFactory_Factory.create(prefsManagerProvider);
      this.debugBuildTypeBehaviorProvider = DebugBuildTypeBehavior_Factory.create(((Provider) defaultNotesRepositoryProvider), ((Provider) defaultLabelsRepositoryProvider));
      this.homeViewModelProvider = HomeViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), ((Provider) defaultLabelsRepositoryProvider), prefsManagerProvider, reminderAlarmManagerProvider, noteItemFactoryProvider, ((Provider) debugBuildTypeBehaviorProvider));
      this.factoryProvider3 = HomeViewModel_Factory_Impl.create(homeViewModelProvider);
      this.searchViewModelProvider = SearchViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), ((Provider) defaultLabelsRepositoryProvider), prefsManagerProvider, reminderAlarmManagerProvider, noteItemFactoryProvider);
      this.factoryProvider4 = SearchViewModel_Factory_Impl.create(searchViewModelProvider);
      this.editViewModelProvider = EditViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), ((Provider) defaultLabelsRepositoryProvider), prefsManagerProvider, reminderAlarmManagerProvider);
      this.factoryProvider5 = EditViewModel_Factory_Impl.create(editViewModelProvider);
      this.labelViewModelProvider = LabelViewModel_Factory.create(((Provider) defaultLabelsRepositoryProvider));
      this.factoryProvider6 = LabelViewModel_Factory_Impl.create(labelViewModelProvider);
      this.settingsViewModelProvider = SettingsViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), ((Provider) defaultLabelsRepositoryProvider), prefsManagerProvider, ((Provider) defaultJsonManagerProvider), reminderAlarmManagerProvider);
      this.factoryProvider7 = SettingsViewModel_Factory_Impl.create(settingsViewModelProvider);
      this.reminderViewModelProvider = ReminderViewModel_Factory.create(((Provider) defaultNotesRepositoryProvider), reminderAlarmManagerProvider);
      this.factoryProvider8 = ReminderViewModel_Factory_Impl.create(reminderViewModelProvider);
      this.labelEditViewModelProvider = LabelEditViewModel_Factory.create(((Provider) defaultLabelsRepositoryProvider));
      this.factoryProvider9 = LabelEditViewModel_Factory_Impl.create(labelEditViewModelProvider);
      this.sortViewModelProvider = SortViewModel_Factory.create(prefsManagerProvider);
      this.exportPasswordViewModelProvider = ExportPasswordViewModel_Factory.create();
      this.factoryProvider10 = ExportPasswordViewModel_Factory_Impl.create(exportPasswordViewModelProvider);
      this.importPasswordViewModelProvider = ImportPasswordViewModel_Factory.create();
      this.factoryProvider11 = ImportPasswordViewModel_Factory_Impl.create(importPasswordViewModelProvider);
    }

    @Override
    public void inject(App app) {
      injectApp(app);
    }

    @Override
    public void inject(MainActivity activity) {
      injectMainActivity(activity);
    }

    @Override
    public void inject(NotificationActivity activity) {
      injectNotificationActivity(activity);
    }

    @Override
    public void inject(HomeFragment fragment) {
      injectHomeFragment(fragment);
    }

    @Override
    public void inject(SearchFragment fragment) {
      injectSearchFragment(fragment);
    }

    @Override
    public void inject(EditFragment fragment) {
      injectEditFragment(fragment);
    }

    @Override
    public void inject(LabelFragment fragment) {
      injectLabelFragment(fragment);
    }

    @Override
    public void inject(SettingsFragment fragment) {
      injectSettingsFragment(fragment);
    }

    @Override
    public void inject(ReminderDialog dialog) {
      injectReminderDialog(dialog);
    }

    @Override
    public void inject(LabelEditDialog dialog) {
      injectLabelEditDialog(dialog);
    }

    @Override
    public void inject(SortDialog dialog) {
      injectSortDialog(dialog);
    }

    @Override
    public void inject(ExportPasswordDialog dialog) {
      injectExportPasswordDialog(dialog);
    }

    @Override
    public void inject(ImportPasswordDialog dialog) {
      injectImportPasswordDialog(dialog);
    }

    @Override
    public void inject(AlarmReceiver receiver) {
      injectAlarmReceiver(receiver);
    }

    private App injectApp(App instance) {
      App_MembersInjector.injectPrefs(instance, prefsManager());
      App_MembersInjector.injectDatabase(instance, providesDatabaseProvider.get());
      return instance;
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      MainActivity_MembersInjector.injectViewModelFactory(instance, factoryProvider.get());
      MainActivity_MembersInjector.injectPrefs(instance, prefsManager());
      return instance;
    }

    private NotificationActivity injectNotificationActivity(NotificationActivity instance) {
      NotificationActivity_MembersInjector.injectViewModelFactory(instance, factoryProvider2.get());
      return instance;
    }

    private HomeFragment injectHomeFragment(HomeFragment instance) {
      NoteFragment_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      NoteFragment_MembersInjector.injectPrefsManager(instance, prefsManager());
      HomeFragment_MembersInjector.injectViewModelFactory(instance, factoryProvider3.get());
      return instance;
    }

    private SearchFragment injectSearchFragment(SearchFragment instance) {
      NoteFragment_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      NoteFragment_MembersInjector.injectPrefsManager(instance, prefsManager());
      SearchFragment_MembersInjector.injectViewModelFactory(instance, factoryProvider4.get());
      return instance;
    }

    private EditFragment injectEditFragment(EditFragment instance) {
      EditFragment_MembersInjector.injectViewModelFactory(instance, factoryProvider5.get());
      EditFragment_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      return instance;
    }

    private LabelFragment injectLabelFragment(LabelFragment instance) {
      LabelFragment_MembersInjector.injectViewModelFactory(instance, factoryProvider6.get());
      LabelFragment_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      return instance;
    }

    private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
      SettingsFragment_MembersInjector.injectViewModelFactory(instance, factoryProvider7.get());
      return instance;
    }

    private ReminderDialog injectReminderDialog(ReminderDialog instance) {
      ReminderDialog_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      ReminderDialog_MembersInjector.injectViewModelFactory(instance, factoryProvider8.get());
      return instance;
    }

    private LabelEditDialog injectLabelEditDialog(LabelEditDialog instance) {
      LabelEditDialog_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      LabelEditDialog_MembersInjector.injectViewModelFactory(instance, factoryProvider9.get());
      return instance;
    }

    private SortDialog injectSortDialog(SortDialog instance) {
      SortDialog_MembersInjector.injectSharedViewModelProvider(instance, sharedViewModelProvider);
      SortDialog_MembersInjector.injectViewModelProvider(instance, sortViewModelProvider);
      return instance;
    }

    private ExportPasswordDialog injectExportPasswordDialog(ExportPasswordDialog instance) {
      ExportPasswordDialog_MembersInjector.injectViewModelFactory(instance, factoryProvider10.get());
      return instance;
    }

    private ImportPasswordDialog injectImportPasswordDialog(ImportPasswordDialog instance) {
      ImportPasswordDialog_MembersInjector.injectViewModelFactory(instance, factoryProvider11.get());
      return instance;
    }

    private AlarmReceiver injectAlarmReceiver(AlarmReceiver instance) {
      AlarmReceiver_MembersInjector.injectReminderAlarmManager(instance, reminderAlarmManager());
      AlarmReceiver_MembersInjector.injectNotesRepository(instance, defaultNotesRepository());
      return instance;
    }
  }
}
