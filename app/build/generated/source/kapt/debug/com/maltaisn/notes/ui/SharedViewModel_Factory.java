// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.ui;

import com.maltaisn.notes.model.NotesRepository;
import com.maltaisn.notes.model.ReminderAlarmManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SharedViewModel_Factory implements Factory<SharedViewModel> {
  private final Provider<NotesRepository> notesRepositoryProvider;

  private final Provider<ReminderAlarmManager> reminderAlarmManagerProvider;

  public SharedViewModel_Factory(Provider<NotesRepository> notesRepositoryProvider,
      Provider<ReminderAlarmManager> reminderAlarmManagerProvider) {
    this.notesRepositoryProvider = notesRepositoryProvider;
    this.reminderAlarmManagerProvider = reminderAlarmManagerProvider;
  }

  @Override
  public SharedViewModel get() {
    return newInstance(notesRepositoryProvider.get(), reminderAlarmManagerProvider.get());
  }

  public static SharedViewModel_Factory create(Provider<NotesRepository> notesRepositoryProvider,
      Provider<ReminderAlarmManager> reminderAlarmManagerProvider) {
    return new SharedViewModel_Factory(notesRepositoryProvider, reminderAlarmManagerProvider);
  }

  public static SharedViewModel newInstance(NotesRepository notesRepository,
      ReminderAlarmManager reminderAlarmManager) {
    return new SharedViewModel(notesRepository, reminderAlarmManager);
  }
}
