// Generated by Dagger (https://dagger.dev).
package com.maltaisn.notes.model;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ReminderAlarmManager_Factory implements Factory<ReminderAlarmManager> {
  private final Provider<NotesRepository> notesRepositoryProvider;

  private final Provider<ReminderAlarmCallback> alarmCallbackProvider;

  public ReminderAlarmManager_Factory(Provider<NotesRepository> notesRepositoryProvider,
      Provider<ReminderAlarmCallback> alarmCallbackProvider) {
    this.notesRepositoryProvider = notesRepositoryProvider;
    this.alarmCallbackProvider = alarmCallbackProvider;
  }

  @Override
  public ReminderAlarmManager get() {
    return newInstance(notesRepositoryProvider.get(), alarmCallbackProvider.get());
  }

  public static ReminderAlarmManager_Factory create(
      Provider<NotesRepository> notesRepositoryProvider,
      Provider<ReminderAlarmCallback> alarmCallbackProvider) {
    return new ReminderAlarmManager_Factory(notesRepositoryProvider, alarmCallbackProvider);
  }

  public static ReminderAlarmManager newInstance(NotesRepository notesRepository,
      ReminderAlarmCallback alarmCallback) {
    return new ReminderAlarmManager(notesRepository, alarmCallback);
  }
}
